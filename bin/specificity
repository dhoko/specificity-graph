#!/usr/bin/env node

'use strict';


var path = require('path');
var fs = require('fs');
var colors = require('cli-color');
var program = require('commander');
var parser = require('../lib/generateCssData');
var stats = require('../lib/cssStats');
var outputCli = require('../lib/outputStatsCli');

program
  .option('-l, --limit', 'Add a limit for selector (over this limit, selectors are bad). Default 25')
  .option('-a, --analytics', 'Display analytics about your CSS')
  .option('-v, --verbose')
  .option('-o, --output', 'Ouput destination')
  .parse(process.argv);

var input = program.args[0] ? path.resolve(program.args[0]) : null;
var output = (program.args[1] || program.ouput) ? path.resolve(program.args[1] || program.output) : null;

function error(e) {
  console.log(colors.bold(colors.red('Specificity encounters an error')));
  console.log();
  console.log(e)
  e.stack && console.log(e.stack);
  process.exit(2);
}

if (input && !fs.existsSync(input)) {
  console.error(colors.red('Unable to read file'), input);
  process.exit(1);
}

if(input) {

  try {
    var css = fs.readFileSync(input);
    var specificity = parser(css.toString());
    var statsSpecificity = stats(specificity);

    if(program.verbose) {
      outputCli.display(statsSpecificity, specificity);
      program.analytics && outputCli.analytics(statsSpecificity);
    }

    if(output) {
      var out = fs.createWriteStream(output);
      out.write(new Buffer(JSON.stringify({
        src: specificity,
        stats: statsSpecificity
      })));
      out.end();
    }

  }catch(e) {
    error(e);
  }
}


if(!input) {
  process.stdin.resume();
  process.stdin.setEncoding('utf8');

  var buffer = '';
  process.stdin.on('data', function(data) {
      buffer += data;
  });

  process.stdin.on('end', function() {
    try {
      var specificity      = parser(buffer);
      var statsSpecificity = stats(specificity);

      console.log(JSON.stringify({
        src: specificity,
        stats: statsSpecificity
      },null, 2));

    }catch(e) {
      error(e);
    }
  });
}